name: Module Package and Release

on:
  push:
    branches:
      - main
      - prerelease
  pull_request:
    branches:
      - main
      - prerelease

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'


      - name: Build
        run: |
          SECRETS_DIR="secrets/"
          mkdir "${SECRETS_DIR}"
          echo "${{ secrets.ALIAS_NAME }}" | base64 -d > ${SECRETS_DIR}/alias_name.txt
          echo "${{ secrets.ALIAS_PASSWORD }}" | base64 -d > ${SECRETS_DIR}/alias_password.txt
          echo "${{ secrets.CHAIN }}" | base64 -d > ${SECRETS_DIR}/chain.p7b
          echo "${{ secrets.ENV }}" | base64 -d > ${SECRETS_DIR}/env
          echo "${{ secrets.KEYSTORE }}" | base64 -d > ${SECRETS_DIR}/keystore.jks
          echo "${{ secrets.KEYSTORE_PASSWORD }}" | base64 -d > ${SECRETS_DIR}/keystore_password.txt
          make
          cat src/config >> $GITHUB_ENV
          

      - name: Check Release Version
        run: |
          echo "RELEASE_IS_PRERELEASE: ${{ env.RELEASE_IS_PRERELEASE }}"
          echo "RELEASE_NAME: ${{ env.RELEASE_NAME }}"
          echo "RELEASE_TAG: ${{ env.RELEASE_TAG }}"
          
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.RELEASE_TAG }}$"; then
            >&2 echo "Error: Tag ${{ env.RELEASE_TAG }} already exists"
            exit 1
          else
            echo "Tag ${TAG_NAME} does not exist"
          fi


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: >
          github.event_name == 'push' && (
            startsWith(github.ref, 'refs/heads/main')
          ||
            startsWith(github.ref, 'refs/heads/prerelease')
          )
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: ${{ env.RELEASE_IS_PRERELEASE }}


      - name: Upload Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: >
          github.event_name == 'push' && (
            startsWith(github.ref, 'refs/heads/main')
          ||
            startsWith(github.ref, 'refs/heads/prerelease')
          )
        shell: bash
        run: |
          ARTIFACT_SEARCH_PATH="."
          echo "Artifact Search Path: ${ARTIFACT_SEARCH_PATH}"
          
          echo ""
          echo "Artifacts:"
          ARTIFACT_PATHS=$(find "${ARTIFACT_SEARCH_PATH}" -maxdepth 1 -type f -name '*.modl')
          for ARTIFACT_PATH in ${ARTIFACT_PATHS}; do
            echo " - ${ARTIFACT_PATH}..."
          done
          
          echo ""
          echo "Uploading Artifacts..."
          for ARTIFACT_PATH in ${ARTIFACT_PATHS}; do
            ARTIFACT_NAME=$(basename "${ARTIFACT_PATH}")
            ARTIFACT_NAME="${ARTIFACT_NAME}"
            echo " - Uploading ${ARTIFACT_NAME}..."
          
            RAW_UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
            # Remove ...assets{?name,label} from the end of the url
            BASE_UPLOAD_URL="$(echo "${RAW_UPLOAD_URL}" | sed "s/assets.*/assets/g")"
            # Add the artifact name to the URL
            UPLOAD_URL="${BASE_UPLOAD_URL}?name=${ARTIFACT_NAME}"

            HTTP_CODE=$(curl \
              --silent \
              --output curl_output.txt \
              --write-out "%{http_code}" \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @${ARTIFACT_PATH} \
              "${UPLOAD_URL}" \
              ) || true
          
            if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]] ; then
              >&2 cat curl_output.txt
              >&2 echo "Could not upload ${ARTIFACT_NAME}"
              exit 1
            fi
            rm curl_output.txt
            
            echo "   Uploaded ${ARTIFACT_NAME} Successfully"
          done
          
          echo ""
          echo "Uploaded All Artifacts Successfully"
